//--------------------------------------------------------------------------
//
// ScriptName : AriVertexColorEditor
// Contents   : 頂点カラー編集をしやすくします。
// Author     : Ari
// URL        : http://cgjishu.net/
// Update     : 2017/11/08 頂点アルファ塗りつぶしにフェースとエッジが対応していないバグ修正。
//              2017/08/06 カラーセット選択UI追加
//                         Vertex/VertexFaceモード切替機能追加 など
//                         バグ修正
//            : 2014/08/28 塗りつぶし加算乗算高速化
//            : 2014/07    公開
//
//--------------------------------------------------------------------------



proc int AriFloatArrayContains(int $item,int $list[]){
	
	int $true=false;
	
	
	for($one in $list){
		
		if($one == $item){
			$true=true;
			break;
		}	
	}
	
	
	return $true;
}
proc float [] rgb255_to_hsv (int $r_255,int $g_255,int $b_255){
	float $hsvfl[];
	vector $rgb=<<$r_255/255.0,$g_255/255.0,$b_255/255.0>>;
	vector $hsv = rgb_to_hsv($rgb);
	$hsvfl[0] = $hsv.x*360;
	$hsvfl[1] = $hsv.y;
	$hsvfl[2] = $hsv.z;
	return $hsvfl;
}
proc AriVertexColorEditor_Painting(string $verList[], vector $colorList[], float $alphaList[],int $mode){
	int $processingIntList[];
	int $roundingList[];
	int $roundingValue=255;
	int $i=0;
	if($mode!=3){
		for($i=0; $i<size($colorList); $i++){
			vector $colorVec = $colorList[$i];
			float $colorOne;
			if($mode==0) $colorOne = $colorVec.x;
			if($mode==1) $colorOne = $colorVec.y;
			if($mode==2) $colorOne = $colorVec.z;
			$roundingList[$i] = $colorOne * $roundingValue + 0.5;
		}
	}
	else{
		for($i=0; $i<size($alphaList); $i++){
			$colorOne = $alphaList[$i];
			$roundingList[$i] = $colorOne * $roundingValue + 0.5;
		}
	}
	for($i=0; $i<size($roundingList); $i++){
		int $colorOneInt = $roundingList[$i];
		if(AriFloatArrayContains($colorOneInt, $processingIntList))continue;
		int $proSize = size($processingIntList);
		$processingIntList[$proSize] = $colorOneInt;
		int $j=0;
		int $k=0;
		string $paintVerList[];
		int    $paintColorList[];
		clear $paintVerList;
		clear $paintColorList;
		for($j=0; $j < size($roundingList); $j++){
			if($colorOneInt == $roundingList[$j]){
				$paintVerList[$k] = $verList[$j];
				$k++;
			}
		}
		float $colorOneFloat = $colorOneInt/255.0;
		if($mode==0)polyColorPerVertex -cla 1 -r $colorOneFloat $paintVerList;
		if($mode==1)polyColorPerVertex -cla 1 -g $colorOneFloat $paintVerList;
		if($mode==2)polyColorPerVertex -cla 1 -b $colorOneFloat $paintVerList;
		if($mode==3)polyColorPerVertex -cla 1 -a $colorOneFloat $paintVerList;
	}
}
proc brushModeColorChange(float $r, float $g, float $b){
	global string $AriVerColorEdUICheckBoxBrush;
	int $brushTrue = `checkBox -q -v $AriVerColorEdUICheckBoxBrush`;
	if($brushTrue){
		PaintVertexColorTool;
		$paintTool=`currentCtx`;
		artAttrPaintVertexCtx -e -pc 1 -selectedattroper "absolute" $paintTool;
		artAttrPaintVertexCtx -e -colorRGBValue $r $g $b $paintTool;
	}
}
global proc AriVertexColorEditor_ColorSetChange(){
	global string $AriVerColorEdTextScrollList;
	string $selectList[] = `textScrollList -q -si $AriVerColorEdTextScrollList`;
	string $selectObj[] = `ls -sl`;
	polyColorSet -e -ccs -colorSet $selectList[0] $selectObj;
	AriVertexColorEditor_ChangeSelect();
}
proc AriVertexColorEditor_GetColorSet(){
	global string $AriVerColorEdTextScrollList;
	string $selectObj[] = `ls -sl`;
	string $colorSetList[]        = `polyColorSet -q -acs $selectObj`;
	string $currentColorSetList[] = `polyColorSet -q -ccs $selectObj`;
	textScrollList -e -ra $AriVerColorEdTextScrollList;
	$colorSetList = stringArrayRemoveDuplicates($colorSetList);
	string $evalString="textScrollList -e ";
	for($colorSet in $colorSetList){
		$evalString += ("-a "+$colorSet+" ");
	}
	$evalString += $AriVerColorEdTextScrollList;
	eval $evalString;
	for($currentColorSet in $currentColorSetList){
		textScrollList -e -si $currentColorSet $AriVerColorEdTextScrollList;
	}
}
global proc AriVerColorE_Copy(){
	global vector $AriVerColorEdColorEditor_CopyColorVal[];
	global int    $AriVerColorEdColorEditor_CopyVertexVal[]; 
	global int    $AriVerColorEdColorEditor_CopyFaceVal[];   
	global string $AriVerColorEdUI_VerFaceModeRadio[3];
	int $verFaceMode = true;
	$verFaceMode = `radioButton -q -sl $AriVerColorEdUI_VerFaceModeRadio[1]`;
	string $selectObj[] = `ls -sl`;
	string $faceVertexList[];
	if($verFaceMode){
		$faceVertexList = `polyListComponentConversion  -tvf  $selectObj`;
		$faceVertexList = `filterExpand -selectionMask 70 $faceVertexList`;
	}
	else{
		$faceVertexList = `polyListComponentConversion  -tv  $selectObj`;
		$faceVertexList = `filterExpand -selectionMask 31 $faceVertexList`;
	}
	float $verColorList[];
	float $verAlphaList[];
	$verColorList = `polyColorPerVertex -q -nun -rgb $faceVertexList`;
	$verAlphaList = `polyColorPerVertex -q -nun -a $faceVertexList`;
	clear $AriVerColorEdColorEditor_CopyColorVal;
	clear $AriVerColorEdColorEditor_CopyVertexVal;
	for($i=0; $i<size($faceVertexList);$i++){
		string $sepa[];
		tokenize $faceVertexList[$i] ".[]" $sepa;
		$AriVerColorEdColorEditor_CopyVertexVal[$i] = $sepa[2];
		if($verFaceMode) $AriVerColorEdColorEditor_CopyFaceVal[$i] = $sepa[3];
		$AriVerColorEdColorEditor_CopyColorVal[$i] = <<$verColorList[$i*3+0],$verColorList[$i*3+1],$verColorList[$i*3+2]>>;
	}
}
global proc AriVerColorE_Paste(){
	global vector $AriVerColorEdColorEditor_CopyColorVal[];
	global int    $AriVerColorEdColorEditor_CopyVertexVal[]; 
	global int    $AriVerColorEdColorEditor_CopyFaceVal[];   
	global string $AriVerColorEdColorEditor_CopyString[];    
	global string $AriVerColorEdUI_VerFaceModeRadio[3];
	int $verFaceMode = true;
	$verFaceMode = `radioButton -q -sl $AriVerColorEdUI_VerFaceModeRadio[1]`;
	string $selectObj[] = `ls -sl`;
	string $faceVertexList[];
	if($verFaceMode){
		$faceVertexList = `polyListComponentConversion  -tvf  $selectObj`;
		$faceVertexList = `filterExpand -selectionMask 70 $faceVertexList`;
	}
	else{
		$faceVertexList = `polyListComponentConversion  -tv  $selectObj`;
		$faceVertexList = `filterExpand -selectionMask 31 $faceVertexList`;
	}
	string $sepa[];
	tokenize $faceVertexList[0] "." $sepa;
	string $polyName = $sepa[0];
	for($i=0;$i<size($faceVertexList);$i++){
		tokenize $faceVertexList[$i] "." $sepa;
		if($polyName != $sepa[0]){
			print "オブジェクト複数\n";
			break;
		}
	}
	string $verNameList[];
	clear $verNameList;
	string $verName;
	if($verFaceMode)	$verName = ($polyName+".vtxFace");
	else				$verName = ($polyName+".vtx");
	vector $copyColor[];
	$copyColor = $AriVerColorEdColorEditor_CopyColorVal;
	for($i=0; $i<size($AriVerColorEdColorEditor_CopyVertexVal);$i++){
		string $verNumberName;
		if($verFaceMode)	$verNumberName = $verName+"["+$AriVerColorEdColorEditor_CopyVertexVal[$i]+"]["+$AriVerColorEdColorEditor_CopyFaceVal[$i]+"]";
		else				$verNumberName = $verName+"["+$AriVerColorEdColorEditor_CopyVertexVal[$i]+"]";
		$verNameList[$i] = $verNumberName;
	}
	float $alphaList[];
	AriVertexColorEditor_Painting($verNameList, $copyColor, $alphaList, 0);
	AriVertexColorEditor_Painting($verNameList, $copyColor, $alphaList, 1);
	AriVertexColorEditor_Painting($verNameList, $copyColor, $alphaList, 2);
}
global proc AriVerColorE_leapPaint(string $varNameList[], vector $baseColorList[], vector $afterColorList[],float $leapVal){
	vector $paintColorList[];
	clear $paintColorList;
	for($i=0; $i<size($varNameList); $i++){
		$paintColorList[$i] = ($baseColorList[$i]*(1-$leapVal)) + ($afterColorList[$i] * $leapVal);
	}
	float $alphaList[];
	AriVertexColorEditor_Painting($varNameList, $paintColorList, $alphaList, 0);
	AriVertexColorEditor_Painting($varNameList, $paintColorList, $alphaList, 1);
	AriVertexColorEditor_Painting($varNameList, $paintColorList, $alphaList, 2);
}
global proc AriVertexColorEditor_ChangeHSVSlider(){
	AriVertexColorEditor_HSVVal();
	AriVertexColorEditor_List(0);
}
global proc AriVertexColorEditor_AddPalet(){
	global string $AriVerColorEdColumnPalet;
	global string $AriVerColorEdPaletButton[];
	global vector $AriVerColorEdPaletButton_color[];
	int $w=26;
	int $paletCount=0;
	for ($j=0;$j<5;$j++){
		rowLayout  -nc 20 	-cw  1 $w -cw  2 $w -cw  3 $w -cw  4 $w -cw  5 $w -cw  6 $w -cw  7 $w -cw  8 $w -cw  9 $w -cw 10 $w
												-cw 11 $w -cw 12 $w -cw 13 $w -cw 14 $w -cw 15 $w -cw 16 $w -cw 17 $w -cw 18 $w -cw 19 $w -cw 20 $w;
		for ($i=0;$i<10;$i++){
			vector $rgb=$AriVerColorEdPaletButton_color[$paletCount];
			$AriVerColorEdPaletButton[$paletCount]=`canvas -w $w -h 16 -rgb ($rgb.x) ($rgb.y) ($rgb.z) -pc ("AriVertexColorEditor_PaletGo("+$paletCount+")")`;
			$paletCount++;
		}
		setParent..;
	}
}
global proc AriVertexColorEditor_PaletGo(int $paletCount){
	global string $AriVerColorEdPaletButton[];
	global string $AriVerColorEdColorSlider;
	global vector $AriVerColorEdPaletButton_color[];
	vector $rgb;
	$rgb=$AriVerColorEdPaletButton_color[$paletCount];
	colorSliderButtonGrp -e -rgb ($rgb.x) ($rgb.y) ($rgb.z) $AriVerColorEdColorSlider;
	ARIReroadInputField(0);
}
global proc AriVertexColorEditor_Save_UI(){
	global string $AriVerColorEdUI_VerFaceModeRadio[2];
	global string $AriVerColorEdEditFloatF[20];
	int $verFaceModeTrue = true;
	float $addValue[];
	float $scaleValue[];
	float $clampValue[];
	$verFaceModeTrue = `radioButton -q -sl $AriVerColorEdUI_VerFaceModeRadio[1]`;
	$addValue[0] = `floatField -q -v  $AriVerColorEdEditFloatF[0]`;
	$addValue[1] = `floatField -q -v  $AriVerColorEdEditFloatF[1]`;
	$addValue[2] = `floatField -q -v  $AriVerColorEdEditFloatF[2]`;
	$addValue[3] = `floatField -q -v  $AriVerColorEdEditFloatF[3]`;
	$addValue[4] = `floatField -q -v  $AriVerColorEdEditFloatF[4]`;
	$scaleValue[0] = `floatField -q -v  $AriVerColorEdEditFloatF[10]`;
	$scaleValue[1] = `floatField -q -v  $AriVerColorEdEditFloatF[11]`;
	$scaleValue[2] = `floatField -q -v  $AriVerColorEdEditFloatF[12]`;
	$scaleValue[3] = `floatField -q -v  $AriVerColorEdEditFloatF[13]`;
	$scaleValue[4] = `floatField -q -v  $AriVerColorEdEditFloatF[14]`;
	$clampValue[0] = `floatField -q -v  $AriVerColorEdEditFloatF[5]`;
	$clampValue[1] = `floatField -q -v  $AriVerColorEdEditFloatF[6]`;
	optionVar -intValue "AriVertexColorEditer_verFaceMode"   $verFaceModeTrue;
	optionVar -floatValue "AriVertexColorEditer_AddRGB"   $addValue[0];
	optionVar -floatValue "AriVertexColorEditer_AddR"     $addValue[1];
	optionVar -floatValue "AriVertexColorEditer_AddG"     $addValue[2];
	optionVar -floatValue "AriVertexColorEditer_AddB"     $addValue[3];
	optionVar -floatValue "AriVertexColorEditer_AddA"     $addValue[4];
	optionVar -floatValue "AriVertexColorEditer_ScaleRGB" $scaleValue[0];
	optionVar -floatValue "AriVertexColorEditer_ScaleR"   $scaleValue[1];
	optionVar -floatValue "AriVertexColorEditer_ScaleG"   $scaleValue[2];
	optionVar -floatValue "AriVertexColorEditer_ScaleB"   $scaleValue[3];
	optionVar -floatValue "AriVertexColorEditer_ScaleA"   $scaleValue[4];
	optionVar -floatValue "AriVertexColorEditer_clampMin" $clampValue[0];
	optionVar -floatValue "AriVertexColorEditer_clampMax" $clampValue[1];
}
global proc AriVertexColorEditor_Edit(int $colorNum,int $mode){
	global string $AriVerColorEdEditFloatF[20];
	global string $AriVerColorEdUI_VerFaceModeRadio[3];
	string $attroperMode;
	float $colorVal;
	if($colorNum<10){
		if($mode==2||$mode==3){
			$colorVal = `floatField -q -v  $AriVerColorEdEditFloatF[$colorNum+10]`;
		}
		else{
			$colorVal = `floatField -q -v  $AriVerColorEdEditFloatF[$colorNum]`;
		}
	}
	int $verFaceMode = true;
	$verFaceMode = `radioButton -q -sl $AriVerColorEdUI_VerFaceModeRadio[1]`;
	string $selectObj[] = `ls -sl`;
	string $selectTr[]  = `ls -sl -tr`;
	string $toVertexList[];
	if($verFaceMode) $toVertexList = `polyListComponentConversion -tvf $selectObj`;
	else			 $toVertexList = `polyListComponentConversion -tv $selectObj`;
	float $rgba[];
	if($mode==0 || $mode==1){
		$attroperMode = "additive";
		$rgba[1] = 0;
		$rgba[2] = 0;
		$rgba[3] = 0;
		$rgba[4] = 0;
	}
	if($mode==2 || $mode==3){
		$attroperMode = "scale";
		$rgba[1] = 1;
		$rgba[2] = 1;
		$rgba[3] = 1;
		$rgba[4] = 1;
	}
	$rgba[$colorNum]=$colorVal;
	if($colorNum!=0){
		if($mode==1)$rgba[$colorNum]=$rgba[$colorNum]*(-1);
		if($mode==3)$rgba[$colorNum]=1.0/$rgba[$colorNum];
	}
	if($colorNum==0){
		$rgba[1]=$rgba[$colorNum];
		$rgba[2]=$rgba[$colorNum];
		$rgba[3]=$rgba[$colorNum];
		if($mode==1){
			$rgba[1]=$rgba[1]*(-1);
			$rgba[2]=$rgba[2]*(-1);
			$rgba[3]=$rgba[3]*(-1);	
		}
		if($mode==3){
			$rgba[1]=1.0/$rgba[1];
			$rgba[2]=1.0/$rgba[2];
			$rgba[3]=1.0/$rgba[3];
		}
	}
	string $currentTool=`currentCtx`;
	PaintVertexColorTool;
	string $paintTool    = `currentCtx`;
	string $selectedattr = (`artAttrPaintVertexCtx -q  -selectedattroper  $paintTool`);
	artAttrPaintVertexCtx -e -selectedattroper $attroperMode $paintTool;
	string $beforeClamp;
	string $beforeAlphaClamp;
	float $beforeMaxMin[4];
	if($colorNum==10 || $colorNum==11){
		$beforeClamp = `artAttrPaintVertexCtx -q -clamp $paintTool`;
		$beforeAlphaClamp = `artAttrPaintVertexCtx -q -alphaclamp $paintTool`;
		$beforeMaxMin[0]=`artAttrPaintVertexCtx -q -cll $paintTool`;
		$beforeMaxMin[1]=`artAttrPaintVertexCtx -q -clu $paintTool`;
		$beforeMaxMin[2]=`artAttrPaintVertexCtx -q -acl $paintTool`;
		$beforeMaxMin[3]=`artAttrPaintVertexCtx -q -acu $paintTool`;
		float $min=`floatField -q -v $AriVerColorEdEditFloatF[5]`;
		float $max=`floatField -q -v $AriVerColorEdEditFloatF[6]`;
		if($colorNum==10)artAttrPaintVertexCtx -e -clamp "both" -cll $min -clu $max  -alphaclamp "none"                     $paintTool;
		if($colorNum==11)artAttrPaintVertexCtx -e -clamp "none"                      -alphaclamp "both" -acl $min -acu $max $paintTool;
	}
	int $beforePc=`artAttrPaintVertexCtx -q -pc $paintTool`;
	artAttrPaintVertexCtx -e -colorRGBAValue $rgba[1] $rgba[2] $rgba[3] $rgba[4] `currentCtx`;
	if($verFaceMode){
		select $toVertexList;
		artAttrPaintVertexCtx -e -pc 2 `currentCtx`;
		artAttrPaintVertexCtx -e -clear `currentCtx`;
	}
	else{
		select $toVertexList;
		artAttrPaintVertexCtx -e -pc 1 `currentCtx`;
		artAttrPaintVertexCtx -e -clear `currentCtx`;
	}
	select $selectObj;
	artAttrPaintVertexCtx -e -pc $beforePc -selectedattroper $selectedattr $paintTool;
	if($colorNum==10 || $colorNum==11){
		artAttrPaintVertexCtx -e -clamp $beforeClamp -cll $beforeMaxMin[0] -clu $beforeMaxMin[1]  -alphaclamp $beforeAlphaClamp -acl $beforeMaxMin[2] -acu $beforeMaxMin[3] $paintTool;
	}
	setToolTo $currentTool;
	AriVertexColorEditor_Save_UI();
	AriVertexColorEditor_ChangeSelect;
}
global proc AriVertexColorEditor_ChangeSelect(){
	global string $AriVerColorEdEscrollLay;
	global string $AriVerColorEdColumnLayout;
	global string $AriVerColorEdColorSlider;
	global string $AriVerColorEdAlphaSlider;
	global string $AriVerColorEdE_checkBox[];
	global string $AriVerColorEdHSVSlider[];
	global string $AriVerColorEdUI_VerFaceModeRadio[3];
	global string $AriVerColorEdColorString_255[];
	global string $AriVerColorEdNewHsvColorString_255[];
	global int $AriVerColorEdColorString_Count[];
	global string $AriVerColorEdEditIntMax;
	AriVertexColorEditor_GetColorSet();
	int $maxVartex=2000;
	$maxVartex=`intField -q -v $AriVerColorEdEditIntMax`;
	int $verFaceMode = true;
	$verFaceMode = `radioButton -q -sl $AriVerColorEdUI_VerFaceModeRadio[1]`;
	string $selectObj[] = `ls -sl`;
	string $faceVertexList[];
	clear $faceVertexList;
	if($verFaceMode){
		$faceVertexList = `polyListComponentConversion  -tvf  $selectObj`;
		$faceVertexList = `filterExpand -selectionMask 70 $faceVertexList`;
	}
	else{
		$faceVertexList = `polyListComponentConversion  -tv  $selectObj`;
		$faceVertexList = `filterExpand -selectionMask 31 $faceVertexList`;	
	}
	clear $AriVerColorEdE_checkBox;
	clear $AriVerColorEdColorString_255;
	clear $AriVerColorEdNewHsvColorString_255;
	if( $maxVartex <= size($faceVertexList)){
		deleteUI $AriVerColorEdColumnLayout;
		$AriVerColorEdColumnLayout =`columnLayout  -p $AriVerColorEdEscrollLay`;
		text -p $AriVerColorEdColumnLayout -l ("選択数"+size($faceVertexList)+"  ("+$maxVartex+"超なので非表示)");
		return;
	}
	if( 0 >= size($faceVertexList)){
		deleteUI $AriVerColorEdColumnLayout;
		$AriVerColorEdColumnLayout =`columnLayout  -p $AriVerColorEdEscrollLay`;
		return;
	}
	if(!size($faceVertexList))return;
	if(size(`polyColorSet -q -acs $faceVertexList`)==0){
		deleteUI $AriVerColorEdColumnLayout;
		$AriVerColorEdColumnLayout =`columnLayout  -p $AriVerColorEdEscrollLay`;
		print("カラーセットなし");
		text -p $AriVerColorEdColumnLayout -l "カラーセットなし";
		return;
	}
	float $verColorList[]= `polyColorPerVertex -q -nun -rgb $faceVertexList`;
	float $verAlphaList[]= `polyColorPerVertex -q -nun -a $faceVertexList`;
	string $verColorString[];
	int $i=0;
	int $j=0;
	for($ver in $faceVertexList){
		float $verColor[];
		$verColor[0]=$verColorList[$i*3]*255;
		$verColor[1]=$verColorList[$i*3+1]*255;
		$verColor[2]=$verColorList[$i*3+2]*255;
		$verColor[3]=$verAlphaList[$i]*255;
		$verColor[0]=trunc($verColor[0]+0.5);
		$verColor[1]=trunc($verColor[1]+0.5);
		$verColor[2]=trunc($verColor[2]+0.5);
		$verColor[3]=trunc($verColor[3]+0.5);
		string $verColor3[];
		$verColor3[0]=AriIntToString($verColor[0]);
		$verColor3[1]=AriIntToString($verColor[1]);
		$verColor3[2]=AriIntToString($verColor[2]);
		$verColor3[3]=AriIntToString($verColor[3]);
		string $colorString=($verColor3[0]+","+$verColor3[1]+","+$verColor3[2]+","+$verColor3[3]);
			$verColorString[$j]=$colorString;
			$j++;
		$i++;
	}
	$AriVerColorEdColorString_255=stringArrayRemoveDuplicates($verColorString);
	for($i=0;$i<size($AriVerColorEdColorString_255);$i++){
		$AriVerColorEdColorString_Count[$i]=stringArrayCount($AriVerColorEdColorString_255[$i], $verColorString);
	}
	AriVertexColorEditor_HSVVal();
	AriVertexColorEditor_ViewSoat(0);
	AriVertexColorEditor_List(0);
}
global proc AriVertexColorEditor_List(int $startNum){
	int $maxView=50;
	global string $AriVerColorEdColorString_255[];	
	global int $AriVerColorEdColorString_Count[];
	global string $AriVerColorEdNewHsvColorString_255[];
	global string $AriVerColorEdEscrollLay;
	global string $AriVerColorEdColumnLayout;
	global string $AriVerColorEdColorSlider;
	global string $AriVerColorEdAlphaSlider;
	global string $AriVerColorEdE_checkBox[];
	global string $AriVerColorEdColorAddButton;
	int $columnHeight=($startNum/$maxView+1)*30*$maxView;
	if($startNum==0){
		deleteUI $AriVerColorEdColumnLayout;
		$AriVerColorEdColumnLayout =`columnLayout   -p $AriVerColorEdEscrollLay`;
	}
	if(`button -ex $AriVerColorEdColorAddButton`)	deleteUI $AriVerColorEdColorAddButton;
	int $total=$startNum+$maxView-1;
	for ($i=$startNum; $i<=$total; $i++){
		if($i>=size($AriVerColorEdColorString_255))break;
		string $color = $AriVerColorEdColorString_255[$i];
		string $sepa[];
		string $valString[4];
		float $listColor255[];
		float $listColor1[];
		tokenize $color "," $sepa;
		$valString[0]=$sepa[0];
		$valString[1]=$sepa[1];
		$valString[2]=$sepa[2];
		$valString[3]=$sepa[3];
		$listColor255[0] = float($sepa[0]);
		$listColor255[1] = float($sepa[1]);
		$listColor255[2] = float($sepa[2]);
		$listColor255[3] = float($sepa[3]);
		$listColor1[0] =$listColor255[0]/255;
		$listColor1[1] =$listColor255[1]/255;
		$listColor1[2] =$listColor255[2]/255;
		$listColor1[3] =$listColor255[3]/255;
		$color = $AriVerColorEdNewHsvColorString_255[$i];
		float $listnewColor1[];
		tokenize $color "," $sepa;
		$listColor255[0] = float($sepa[0]);
		$listColor255[1] = float($sepa[1]);
		$listColor255[2] = float($sepa[2]);
		$listColor255[3] = float($sepa[3]);
		$listnewColor1[0] =$listColor255[0]/255;
		$listnewColor1[1] =$listColor255[1]/255;
		$listnewColor1[2] =$listColor255[2]/255;
		$listnewColor1[3] =$listColor255[3]/255;
		int $count = 0;
		rowLayout -p $AriVerColorEdColumnLayout -nc 6 -cw6 26 20 30 50 130 1 ;
			text  -l (" "+($i+1));
			$AriVerColorEdE_checkBox[$i]=`checkBox -l ""`;
			text -l ($AriVerColorEdColorString_Count[$i]);
			rowLayout -nc 2 -cw2 30 30;
				button -w 30 -h 24 -bgc $listColor1[0] $listColor1[1] $listColor1[2] -l"" -c ("AriVertexColorEditor_Picup("+ $listColor1[0]+","+ $listColor1[1] +","+$listColor1[2]+","+0+")");
				button -w 15 -h 24 -bgc $listColor1[3] $listColor1[3] $listColor1[3] -l"" -c ("AriVertexColorEditor_Picup("+ $listColor1[3]+","+ $listColor1[3] +","+$listColor1[3]+","+1+")");
			setParent..;
				rowLayout -nc 4 -cw4 27 27 27 27;
					int $wrgb[]={int($listColor1[0]*28),int($listColor1[1]*28),int($listColor1[2]*28),int($listColor1[3]*28)};
					$wrgb[0]=`clamp 0 28 $wrgb[0]`;
					$wrgb[1]=`clamp 0 28 $wrgb[1]`;
					$wrgb[2]=`clamp 0 28 $wrgb[2]`;
					$wrgb[3]=`clamp 0 28 $wrgb[3]`;
					columnLayout;
						text -l $valString[0] -h 20;
						if($wrgb[0]!=0)	canvas -rgb 1 0 0 -h 6 -w $wrgb[0];
						else			text -l "" -h 6;
					setParent..;
					columnLayout;
						text -l $valString[1] -h 20;
						if($wrgb[1]!=0)	canvas -rgb 0 1 0 -h 6 -w $wrgb[1];
						else			text -l "" -h 6;
					setParent..;
					columnLayout;
						text -l $valString[2] -h 20;
						if($wrgb[2]!=0)	canvas -rgb 0 0 1 -h 6 -w $wrgb[2];
						else			text -l "" -h 6;
					setParent..;
					columnLayout;
						text -l $valString[3]- h 20;
						if($wrgb[3]!=0)	canvas -rgb 1 1 1 -h 6 -w $wrgb[3];
						else			text -l "" -h 6;
					setParent..;
				setParent..;
			button -w 1 -vis 0 -bgc $listnewColor1[0] $listnewColor1[1] $listnewColor1[2] -l"" -c ("AriVertexColorEditor_Picup("+ $listColor1[0]+","+ $listColor1[1] +","+$listColor1[2]+","+0+")");
		setParent..;
		if($i>=$total){
			$AriVerColorEdColorAddButton=`button -w 300 -p $AriVerColorEdColumnLayout -l (($i+1)+"以降を表示") -c ("AriVertexColorEditor_List( "+($i+1)+  ")")`;
			break;
		}
	}
	setParent..;
}
global proc AriVertexColorEditor_Picup(float $r,float $g,float $b,int $mode){
	global string $AriVerColorEdColorSlider;
	global string $AriVerColorEdAlphaSlider;
	global string $AriVerColorEdPaletButton[];
	global vector $AriVerColorEdPaletButton_color[];
	global string $AriVerColorEdDirectFloatF;
	int $paletTotal = 50;
	if($mode==0){
		colorSliderButtonGrp -e -rgb $r $g $b $AriVerColorEdColorSlider;
		floatFieldGrp -e -v1 $r -v2 $g -v3 $b $AriVerColorEdDirectFloatF;
		int $blackNum=0;
		for($i=0;$i<($paletTotal-1);$i++){
			vector $rgb=$AriVerColorEdPaletButton_color[$paletTotal-2-$i];
			if($rgb.x==0 && $rgb.y==0 && $rgb.z==0){	
			}
			else{
				$AriVerColorEdPaletButton_color[$paletTotal-1-$i]=$rgb;
				canvas -e -rgb ($rgb.x) ($rgb.y) ($rgb.z) $AriVerColorEdPaletButton[$paletTotal-1-$i];
			}
		}
		canvas -e -rgb $r $g $b $AriVerColorEdPaletButton[0];
		$AriVerColorEdPaletButton_color[0]=<<$r,$g,$b>>;
	}
	else{
		colorSliderButtonGrp -e -rgb $r $g $b $AriVerColorEdAlphaSlider;
		floatFieldGrp -e -v4 $r $AriVerColorEdDirectFloatF;
	}
	brushModeColorChange($r,$g,$b);
}
global proc ARIReroadInputField(int $mode){
	global string $AriVerColorEdColorSlider;
	global string $AriVerColorEdAlphaSlider;
	global string $AriVerColorEdDirectFloatF;
	float $rgb[];
	if($mode==0){
		$rgb=`colorSliderButtonGrp -q -rgb $AriVerColorEdColorSlider`;
		floatFieldGrp -e -v1 $rgb[0] -v2 $rgb[1] -v3 $rgb[2] $AriVerColorEdDirectFloatF;
	}
	if($mode==1){
		$rgb=`colorSliderButtonGrp -q -rgb $AriVerColorEdAlphaSlider`;
		floatFieldGrp -e -v4 $rgb[0] $AriVerColorEdDirectFloatF;
	}
	if($mode==10){
		$rgb[0]=`floatFieldGrp -q -v1 $AriVerColorEdDirectFloatF`;
		$rgb[1]=`floatFieldGrp -q -v2 $AriVerColorEdDirectFloatF`;
		$rgb[2]=`floatFieldGrp -q -v3 $AriVerColorEdDirectFloatF`;
		$rgb[3]=`floatFieldGrp -q -v4 $AriVerColorEdDirectFloatF`;
		colorSliderButtonGrp -e -rgb $rgb[0] $rgb[1] $rgb[2] $AriVerColorEdColorSlider;
		colorSliderButtonGrp -e -rgb $rgb[3] $rgb[3] $rgb[3] $AriVerColorEdAlphaSlider;
	}
	brushModeColorChange($rgb[0],$rgb[1],$rgb[2]);
}
global proc AriVertexColorEditor_Select(int $mode){
	AriVertexColorEditor_HSVVal();
	global string $AriVerColorEdE_checkBox[];	
	global string $AriVerColorEdColorString_255[];
	global string $AriVerColorEdNewHsvColorString_255[];
	global string $AriVerColorEdUI_VerFaceModeRadio[3];
	int $selectR[];
	int $selectG[];
	int $selectB[];
	int $selectA[];
	int $selectTotal=0;
	int $allOff=1;
	int $i=0;
	int $j=0;
	for($checkBox in $AriVerColorEdE_checkBox){
		if(`checkBox -q -value $AriVerColorEdE_checkBox[$i]`){
			$allOff=0;
			break;
		}
		$i++;
	}
	$i=0;
	if($allOff==0){
		for($checkBox in $AriVerColorEdE_checkBox){
			if(`checkBox -q -value $AriVerColorEdE_checkBox[$i]`){
				string $sepa[];
				string $colors = $AriVerColorEdColorString_255[$i];
				tokenize $colors "," $sepa;
				$selectR[$j] = int($sepa[0]);
				$selectG[$j] = int($sepa[1]);
				$selectB[$j] = int($sepa[2]);
				$selectA[$j] = int($sepa[3]);
				$j++;
			}
			$i++;
		}
	}
	else{
		for($varSt in $AriVerColorEdColorString_255){
			string $sepa[];
			string $colors=$AriVerColorEdColorString_255[$i];
			tokenize $colors "," $sepa;
			$selectR[$j]=int($sepa[0]);
			$selectG[$j]=int($sepa[1]);
			$selectB[$j]=int($sepa[2]);
			$selectA[$j]=int($sepa[3]);
			$j++;
			$i++;
		}
	}
	int $verFaceMode = true;
	$verFaceMode = `radioButton -q -sl $AriVerColorEdUI_VerFaceModeRadio[1]`;
	string $selectObj[] = `ls -sl`;
	string $vertexList[];
	if($verFaceMode){
		$vertexList = `polyListComponentConversion  -tvf  $selectObj`;
		$vertexList = `filterExpand -selectionMask 70 $vertexList`;
	}
	else{
		$vertexList = `polyListComponentConversion  -tv  $selectObj`;
		$vertexList = `filterExpand -selectionMask 31 $vertexList`;
	}
	if(size($vertexList)<=0) return;
	float $verColorList[]= `polyColorPerVertex -q -nun -rgb $vertexList`;
	float $verAlphaList[]= `polyColorPerVertex -q -nun -a $vertexList`;
	string $verColorString[];
	vector $decisionColorList[];
	string $selectList[];
	int $i=0;
	int $j=0;
	int $k=0;
	for($ver in $vertexList){
		float $verColor[];
		$verColor[0] = trunc($verColorList[$i*3]  *255+0.5);
		$verColor[1] = trunc($verColorList[$i*3+1]*255+0.5);
		$verColor[2] = trunc($verColorList[$i*3+2]*255+0.5);
		$verColor[3] = trunc($verAlphaList[$i]    *255+0.5);
		for($j=0;$j<size($selectR);$j++){
			if(	$verColor[0]==$selectR[$j] && 
				$verColor[1]==$selectG[$j] && 
				$verColor[2]==$selectB[$j] && 
				$verColor[3]==$selectA[$j]){
				if($mode==1){
					string $color = $AriVerColorEdNewHsvColorString_255[$j];
					string $sepa[];
					float $listColor255[];
					float $listColor1[];
					tokenize $color "," $sepa;
					$listColor255[0] = float($sepa[0]);
					$listColor255[1] = float($sepa[1]);
					$listColor255[2] = float($sepa[2]);
					$listColor1[0] = $listColor255[0]/255;
					$listColor1[1] = $listColor255[1]/255;
					$listColor1[2] = $listColor255[2]/255;
					$decisionColorList[$i] = <<$listColor1[0],$listColor1[1],$listColor1[2]>>;
				}
				$selectList[$k] = $ver;
				$k++;
			}
		}
		$i++;
	}
	select $selectList;
	float $alphaList[];
	if($mode==1){
		AriVertexColorEditor_Painting($vertexList,$decisionColorList,$alphaList,0);
		AriVertexColorEditor_Painting($vertexList,$decisionColorList,$alphaList,1);
		AriVertexColorEditor_Painting($vertexList,$decisionColorList,$alphaList,2);
	}
	AriVertexColorEditor_ChangeSelect();
}
global proc AriVertexColorEditor_SelView(){
	string $selects[]=`ls -sl`;
	string $selectVers[]=`polyListComponentConversion -tv $selects`;
	select $selectVers;
}
global proc AriVertexColorEditor_ButtonOn(int $mode){
	global string $AriVerColorEdColorSlider;
	global string $AriVerColorEdAlphaSlider;
	global string $AriVerColorEdDirectFloatF;
	global string $AriVerColorEdDirectCheckB;
	string $selectList[]=`ls -sl`;
	string $edgeList[]=`filterExpand -selectionMask 32 $selectList`;
	string $vertexFaceList[];
	if(size($edgeList)!=0){
		$vertexFaceList=`polyListComponentConversion -tvf $edgeList`;
	}
	else{
		$vertexFaceList=$selectList;
	}
	if($mode==0){
		float $rgb[]= `colorSliderButtonGrp -q -rgb $AriVerColorEdColorSlider`;
		polyColorPerVertex -cla 1 -r $rgb[0] $vertexFaceList;
		polyColorPerVertex -cla 1 -g $rgb[1] $vertexFaceList;
		polyColorPerVertex -cla 1 -b $rgb[2] $vertexFaceList;
	}
	if($mode==5){
		float $rgb[]= `colorSliderButtonGrp -q -rgb $AriVerColorEdAlphaSlider`;
		polyColorPerVertex -cla 1 -a $rgb[0] $vertexFaceList;
	}
	float $rgb[]=`floatFieldGrp -q -v $AriVerColorEdDirectFloatF`;
		if($mode==1)polyColorPerVertex -cla 1 -r $rgb[0] $vertexFaceList;
		if($mode==2)polyColorPerVertex -cla 1 -g $rgb[1] $vertexFaceList;
		if($mode==3)polyColorPerVertex -cla 1 -b $rgb[2] $vertexFaceList;
		if($mode==4)polyColorPerVertex -cla 1 -a $rgb[3] $vertexFaceList;
	if($mode==10){
		int $i=0;
		int $true[];
		float $rgb[]=`floatFieldGrp -q -v $AriVerColorEdDirectFloatF`;
		$true[0]=`checkBoxGrp -q -v1 $AriVerColorEdDirectCheckB`;
		$true[1]=`checkBoxGrp -q -v2 $AriVerColorEdDirectCheckB`;
		$true[2]=`checkBoxGrp -q -v3 $AriVerColorEdDirectCheckB`;
		$true[3]=`checkBoxGrp -q -v4 $AriVerColorEdDirectCheckB`;
		if($true[0])polyColorPerVertex -cla 1 -r $rgb[0] $vertexFaceList;
		if($true[1])polyColorPerVertex -cla 1 -g $rgb[1] $vertexFaceList;
		if($true[2])polyColorPerVertex -cla 1 -b $rgb[2] $vertexFaceList;
		if($true[3])polyColorPerVertex -cla 1 -a $rgb[3] $vertexFaceList;
	}
	AriVertexColorEditor_ChangeSelect;
}
global proc AriVertexColorEditor_ViewONOFF(int $vis){
	global string $AriVerColorEdUICheckBoxColorVis;
	int $allTrue = `checkBox -q -v $AriVerColorEdUICheckBoxColorVis`;
	string $selectObj[] = `ls -sl -tr`;
	if($allTrue)  $selectObj = `ls -tr`;
	string $shapeList[] = `listRelatives -c -pa -type "mesh" $selectObj`;
	string $object[];
	if(!$allTrue) $object = `polyListComponentConversion`;
	for($obj in $object){
		if(attributeExists("displayColors",$obj)){
			setAttr ($obj+".displayColors") $vis;
		}
	}
	for($obj in $shapeList){
		if(attributeExists("displayColors",$obj)){
			setAttr ($obj+".displayColors") $vis;
		}
	}
}
proc AriVertexColorEditor_Smooth_GO(){
	PolySelectConvert 3;
	string $currentTool=`currentCtx`;
	string $paintTool;
	PaintVertexColorTool;
	$paintTool=`currentCtx`;
	string $selectedattr= (`artAttrPaintVertexCtx -q  -selectedattroper  $paintTool`);
	artAttrPaintVertexCtx -e -pc 1 -selectedattroper "smooth" $paintTool;
	artAttrPaintVertexCtx -e -clear `currentCtx`;
	artAttrPaintVertexCtx -e -pc 1 -selectedattroper $selectedattr $paintTool;
	setToolTo $currentTool;
}
global proc AriVertexColorEditor_Smooth(int $mode){
	global string $AriVerColorEdUISmoothFloatS;
	float $leapVal = 1;
	$leapVal = `floatSliderGrp -q -v $AriVerColorEdUISmoothFloatS`;
	int $peastTrue = true;
	if($leapVal==1 && $mode==0){
		$peastTrue = false;
	}
	string $selectObj[];
	string $faceVertexList[];
	vector $verColorVectorList[];
	float  $verAlphaList[];
	if($peastTrue){
		$selectObj = `ls -sl`;
		$faceVertexList = `polyListComponentConversion  -tv  $selectObj`;
		$faceVertexList = `filterExpand -selectionMask 31 $faceVertexList`;
		float $verColorList[] = `polyColorPerVertex -q -nun -rgb $faceVertexList`;
		$verAlphaList = `polyColorPerVertex -q -nun -a   $faceVertexList`;
		for($i=0; $i<size($faceVertexList);$i++){
			$verColorVectorList[$i] = <<$verColorList[$i*3+0],$verColorList[$i*3+1],$verColorList[$i*3+2]>>;
		}
	}
	AriVertexColorEditor_Smooth_GO();
	if($leapVal != 1.0){
		vector $verColorAfterList[];
		float  $verAlphaAfterList[];
		float $verColorList[] = `polyColorPerVertex -q -nun -rgb $faceVertexList`;
		float $afterAlpha[]   = `polyColorPerVertex -q -nun -a   $faceVertexList`;
		for($i=0; $i<size($verColorVectorList);$i++){
			vector $afterColor  = <<$verColorList[$i*3+0],$verColorList[$i*3+1],$verColorList[$i*3+2]>>;
			vector $beforeColor = $verColorVectorList[$i];
			float $r = ($afterColor.x * ($leapVal)) + ($beforeColor.x * (1-$leapVal));
			float $g = ($afterColor.y * ($leapVal)) + ($beforeColor.y * (1-$leapVal));
			float $b = ($afterColor.z * ($leapVal)) + ($beforeColor.z * (1-$leapVal));
			float $a = ($afterAlpha[$i] * ($leapVal)) + ($verAlphaList[$i] * (1-$leapVal));
			$verColorAfterList[$i] = <<$r, $g, $b>>;
			$verAlphaAfterList[$i] = $a;
		}
		if($mode!=2){
			AriVertexColorEditor_Painting($faceVertexList, $verColorAfterList, $verAlphaAfterList, 0);
			AriVertexColorEditor_Painting($faceVertexList, $verColorAfterList, $verAlphaAfterList, 1);
			AriVertexColorEditor_Painting($faceVertexList, $verColorAfterList, $verAlphaAfterList, 2);
		}
		if($mode!=1){
			AriVertexColorEditor_Painting($faceVertexList, $verColorVectorList, $verAlphaAfterList, 3);
		}
	}
	if($peastTrue){
		if($mode==2){
			AriVertexColorEditor_Painting($faceVertexList, $verColorVectorList, $verAlphaList, 0);
			AriVertexColorEditor_Painting($faceVertexList, $verColorVectorList, $verAlphaList, 1);
			AriVertexColorEditor_Painting($faceVertexList, $verColorVectorList, $verAlphaList, 2);
		}
		if($mode==1){
			AriVertexColorEditor_Painting($faceVertexList, $verColorVectorList, $verAlphaList, 3);
		}
	}
	AriVertexColorEditor_ChangeSelect();
}
global proc AriVertexColorEditor_ViewSoat(int $mode){
	global string $AriVerColorEdColorString_255[];	
	global int $AriVerColorEdColorString_Count[];
	int $r_255[];
	int $g_255[];
	int $b_255[];
	int $a_255[];
	for($i=0;$i<size($AriVerColorEdColorString_255);$i++){
		string $sepa[];
		string $colors=$AriVerColorEdColorString_255[$i];
		tokenize $colors "," $sepa;
		$r_255[$i]=int($sepa[0]);
		$g_255[$i]=int($sepa[1]);
		$b_255[$i]=int($sepa[2]);
		$a_255[$i]=int($sepa[3]);
		float $hsv[]=rgb255_to_hsv($r_255[$i],$g_255[$i],$b_255[$i]);
	}
}
global proc AriVertexColorEditor_HSVVal(){
	global string $AriVerColorEdHSVSlider[];
	global string $AriVerColorEdE_checkBox[];	
	global string $AriVerColorEdColorString_255[];
	global string $AriVerColorEdNewHsvColorString_255[];
	float $h=`floatSliderGrp -q -v $AriVerColorEdHSVSlider[0]`;
	float $s=`floatSliderGrp -q -v $AriVerColorEdHSVSlider[1]`;
	float $v=`floatSliderGrp -q -v $AriVerColorEdHSVSlider[2]`;
	for($i=0;$i<size($AriVerColorEdColorString_255);$i++){
		string $sepa[];
		string $colors=$AriVerColorEdColorString_255[$i];
		tokenize $colors "," $sepa;
		$r_255[$i]=int($sepa[0]);
		$g_255[$i]=int($sepa[1]);
		$b_255[$i]=int($sepa[2]);
		$a_255[$i]=int($sepa[3]);
		float $hsv[]=rgb255_to_hsv($r_255[$i],$g_255[$i],$b_255[$i]);
		float $newhsv[];
		$newhsv[0]=$hsv[0]+$h;
		$newhsv[0]=($newhsv[0]+360)%360;
		$newhsv[1]=$hsv[1]+$s;
		if($newhsv[1]<0)$newhsv[1]=0;
		if($newhsv[1]>1)$newhsv[1]=1;
		$newhsv[2]=$hsv[2]+$v;
		if($newhsv[2]<0)$newhsv[2]=0;
		if($newhsv[2]>1)$newhsv[2]=1;
		vector $newrgb=(hsv_to_rgb(<<($newhsv[0]/360),$newhsv[1],$newhsv[2] >>));
		$newrgb = $newrgb;
		int $newRGB255[4];
		$newRGB255[0]=trunc(($newrgb.x)*255+0.5);
		$newRGB255[1]=trunc(($newrgb.y)*255+0.5);
		$newRGB255[2]=trunc(($newrgb.z)*255+0.5);
		$newRGB255[3]=0;
		$AriVerColorEdNewHsvColorString_255[$i]=($newRGB255[0]+","+$newRGB255[1]+","+$newRGB255[2]+","+$newRGB255[3]);
	}
}
global proc AriVertexColorEditor_GradationVerGet(int $mode){
	global string $AriVerColorEdGradationInput[];
	string $selectObj[] = `ls -sl`;
	string $vertexList[] = `polyListComponentConversion -tv $selectObj`;
	$vertexList = `filterExpand -selectionMask 31 $vertexList`;
	float $vertexPos[];
	float $verColor[];
	$vertexPos=`pointPosition $vertexList[0]`;
	floatFieldGrp -e -v1 $vertexPos[0] -v2 $vertexPos[1] -v3 $vertexPos[2] $AriVerColorEdGradationInput[0];
	string $fvertexList[] = `polyListComponentConversion -tvf $vertexList[0]`;
	$fvertexList = `filterExpand -selectionMask 70 $fvertexList[0]`;
	$verColor= `polyColorPerVertex -q -nun -rgb $fvertexList[0]`;
	colorSliderGrp  -e -rgb $verColor[0] $verColor[1] $verColor[2] $AriVerColorEdGradationInput[1];
	$vertexPos=`pointPosition $vertexList[1]`;
	floatFieldGrp -e -v1 $vertexPos[0] -v2 $vertexPos[1] -v3 $vertexPos[2] $AriVerColorEdGradationInput[2];
	string $fvertexList[] = `polyListComponentConversion -tvf $vertexList[1]`;
	$fvertexList = `filterExpand -selectionMask 70 $fvertexList[0]`;
	$verColor= `polyColorPerVertex -q -nun -rgb $fvertexList[0]`;
	colorSliderGrp  -e -rgb $verColor[0] $verColor[1] $verColor[2] $AriVerColorEdGradationInput[3];
}
global proc AriVerColorE_Rand(int $mode){
	global string $AriVerColorEdColorSliderRand[4];
	string $selectObj[] = `ls -sl`;
	string $vertexList[] = `polyListComponentConversion -tv $selectObj`;
	$vertexList = `filterExpand -selectionMask 31 $vertexList`;
	float $rgb1[] =`colorSliderGrp -q -rgb $AriVerColorEdColorSliderRand[0]`;
	float $rgb2[] =`colorSliderGrp -q -rgb $AriVerColorEdColorSliderRand[1]`;
	for($ver in $vertexList){
		float $rand=`rand $rgb1[0] $rgb2[0]`;
		if($mode==0)	polyColorPerVertex -r $rand -g $rand -b $rand $ver ;
		if($mode==1)	polyColorPerVertex -a $rand $ver;
	}
	AriVertexColorEditor_ChangeSelect;
}
global proc AriVertexColorEditor_GradationGo(){
	global string $AriVerColorEdGradationInput[];
	string $selectObj[] = `ls -sl`;
	string $vertexList[] = `polyListComponentConversion -tv $selectObj`;
	$vertexList = `filterExpand -selectionMask 31 $vertexList`;
	float $position1[];
	$position1[0]=`floatFieldGrp -q -v1 $AriVerColorEdGradationInput[0]`;
	$position1[1]=`floatFieldGrp -q -v2 $AriVerColorEdGradationInput[0]`;
	$position1[2]=`floatFieldGrp -q -v3 $AriVerColorEdGradationInput[0]`;
	float $position2[];
	$position2[0]=`floatFieldGrp -q -v1 $AriVerColorEdGradationInput[2]`;
	$position2[1]=`floatFieldGrp -q -v2 $AriVerColorEdGradationInput[2]`;
	$position2[2]=`floatFieldGrp -q -v3 $AriVerColorEdGradationInput[2]`;
	float $color1[] =`colorSliderGrp  -q -rgb  $AriVerColorEdGradationInput[1]`;
	float $color2[] =`colorSliderGrp  -q -rgb  $AriVerColorEdGradationInput[3]`;
	float $colorSun[];
	$colorSub[0]=$color2[0]-$color1[0];
	$colorSub[1]=$color2[1]-$color1[1];
	$colorSub[2]=$color2[2]-$color1[2];
	for($ver in $vertexList){
		float $verPos[]=`pointPosition $ver`;
		float $dis1= ($verPos[0]-$position1[0])*($verPos[0]-$position1[0])
					+($verPos[1]-$position1[1])*($verPos[1]-$position1[1])
					+($verPos[2]-$position1[2])*($verPos[2]-$position1[2]);
		float $dis2= ($verPos[0]-$position2[0])*($verPos[0]-$position2[0])
					+($verPos[1]-$position2[1])*($verPos[1]-$position2[1])
					+($verPos[2]-$position2[2])*($verPos[2]-$position2[2]);
		$dis1=sqrt($dis1);
		$dis2=sqrt($dis2);
		float $newColor[];
		$newColor[0]=$color1[0]+($colorSub[0]*($dis1/($dis1+$dis2)));
		$newColor[1]=$color1[1]+($colorSub[1]*($dis1/($dis1+$dis2)));
		$newColor[2]=$color1[2]+($colorSub[2]*($dis1/($dis1+$dis2)));
		polyColorPerVertex  -nun -rgb $newColor[0] $newColor[1] $newColor[2] $ver;
	}
	AriVertexColorEditor_ChangeSelect;
}
global proc AriVertexColorEditor_VectorGet(){
	global string $AriVerColorEdVectorColorSlider[];
	string $selectVer[] = `ls -sl`;
	string $vertexList[] = `filterExpand -selectionMask 31 $selectVer`;
	float $nor[]=`polyNormalPerVertex -q -xyz $vertexList[0]`;
	floatFieldGrp -e -v1 ($nor[0]) -v2 ($nor[1]) -v3 ($nor[2])  $AriVerColorEdVectorColorSlider[5];
}
global proc AriVertexColorEditor_CreateRamp(){
	global string $AriVerColorEdRampColorPort;
	global string $AriVerColorEdRampColorSlider;
	global string $AriVerColorEdRampFieldSlider;
	global string $AriVerColorEdRampColorTextF;
	string $ramp = `createNode "ramp" -n "AriVertexColorEditorRamp"`;
	print $ramp;
	rampColorPort -e -node $ramp -sc $AriVerColorEdRampColorSlider -sp $AriVerColorEdRampFieldSlider $AriVerColorEdRampColorPort;
	textField -e -text $ramp $AriVerColorEdRampColorTextF;
}
global proc AriVertexColorEditor_ConnectRamp(){
	global string $AriVerColorEdRampColorPort;
	global string $AriVerColorEdRampColorSlider;
	global string $AriVerColorEdRampFieldSlider;
	global string $AriVerColorEdRampColorTextF;
	string $ramp =`textField -q -text $AriVerColorEdRampColorTextF`;
	rampColorPort -e -node $ramp -sc $AriVerColorEdRampColorSlider -sp $AriVerColorEdRampFieldSlider $AriVerColorEdRampColorPort;
}
proc vector AriVertexColorEditor_GetRampColor(float $pos){
	global string $AriVerColorEdRampColorTextF;
	string $ramp =`textField -q -text $AriVerColorEdRampColorTextF`;
	float  $positionList[];
	vector $colorList[];
	string $posColor[];
	int $size = `getAttr -size ($ramp+".colorEntryList")`;
	for($i=0;$i<$size;$i++){
		float  $pos =`getAttr ($ramp+".colorEntryList["+$i+"].position")`;
		vector $color =`getAttr ($ramp+".colorEntryList["+$i+"].color")`;
		$posColor[$i] = ($pos+" : "+$color.x+","+$color.y+","+$color.z);
	}
	string $sortPosColor[] = `sort $posColor`;
	float  $sortPositionList[];
	vector $sortColorList[];
	for($i=0; $i<size($sortPosColor); $i++){
		string $sepa[];
		tokenize $sortPosColor[$i] ":" $sepa;
		$sortPositionList[$i] = float($sepa[0]);
		string $sepaColor[];
		tokenize $sepa[1] "," $sepaColor;
		$sortColorList[$i]=<<float($sepaColor[0]), float($sepaColor[1]), float($sepaColor[2])>>;
	}
	int $posArray;
	for($i=0; $i<size($sortPositionList); $i++){
		if($pos < $sortPositionList[$i]){
			$posArray = $i;
			break;
		}
	}
	float $startPos = $sortPositionList[$posArray-1];
	float $endPos   = $sortPositionList[$posArray];
	float $par = ($pos - $startPos)/($endPos - $startPos);
	vector $startColor = $sortColorList[$posArray-1];
	vector $endColor   = $sortColorList[$posArray];
	vector $parColor = ($endColor-$startColor) * $par + $startColor;
	return $parColor;
}
global proc AriVertexColorEditor_GetRamp(){
	AriVertexColorEditor_GetRampColor(0.5);
}
global proc AriVertexColorEditor_VectorSet(){
	global string $AriVerColorEdVectorColorSlider[];
	string $selectObj[] = `ls -sl`;
	string $vertexList[] = `polyListComponentConversion -tvf $selectObj`;
	$vertexList = `filterExpand -selectionMask 70 $vertexList`;
	vector $verVector;
	vector $lightVector;
	float $minColor[] = `colorSliderGrp -q -rgb  $AriVerColorEdVectorColorSlider[0]`;
	float $maxColor[] = `colorSliderGrp -q -rgb  $AriVerColorEdVectorColorSlider[1]`;
	float $minAngle   = `floatSliderGrp -q -v    $AriVerColorEdVectorColorSlider[3]`;
	float $maxAngle   = `floatSliderButtonGrp -q -v $AriVerColorEdVectorColorSlider[4]`;
	if($minAngle!=0)$minAngle = $minAngle*3.14159/180;
	if($maxAngle!=0)$maxAngle = $maxAngle*3.14159/180;
	float $lightVec[];
	$lightVec[0] = `floatFieldGrp -q -v1 $AriVerColorEdVectorColorSlider[5]`;
	$lightVec[1] = `floatFieldGrp -q -v2 $AriVerColorEdVectorColorSlider[5]`;
	$lightVec[2] = `floatFieldGrp -q -v3 $AriVerColorEdVectorColorSlider[5]`;
	$lightVector=<<$lightVec[0],$lightVec[1],$lightVec[2]>>;
	for($ver in $vertexList){
		float $nor[]=`polyNormalPerVertex -q -xyz $ver`;
		$verVector=<<$nor[0],$nor[1],$nor[2]>>;
		float $verAngle=angle ($lightVector,$verVector);
		float $anglePer = -1*($verAngle/3.141592)+1;
		vector $perColor = AriVertexColorEditor_GetRampColor($anglePer);
		polyColorPerVertex -cla 0 -r ($perColor.x) $ver;
		polyColorPerVertex -cla 0 -g ($perColor.y) $ver;
		polyColorPerVertex -cla 0 -b ($perColor.z) $ver;
	}
	AriVertexColorEditor_ChangeSelect;
}
global proc AriVertexColorEditor_MathSet(){
	global string $AriVerColorEdMathTextField;
	string $text=`textField -q $AriVerColorEdMathTextField`;
	string $selectObj[] = `ls -sl`;
	string $vertexList[] = `polyListComponentConversion -tvf $selectObj`;
	$vertexList = `filterExpand -selectionMask 70 $vertexList`;
	for($ver in $vertexList){
		float $nor[]=`polyColorPerVertex -q -rgb $ver`;
		float $makeColor[];
		int $i=0;
		for($input in $nor){
			$makeColor[$i]=pow(0.5+$input,1.2)-0.5;
			if($makeColor[$i]>2)$makeColor[$i]=2;
			if($makeColor[$i]<0)$makeColor[$i]=0;
			$i++;
		}
		polyColorPerVertex -cla 0 -r $makeColor[0] $ver;
		polyColorPerVertex -cla 0 -g $makeColor[1] $ver;
		polyColorPerVertex -cla 0 -b $makeColor[2] $ver;
	}
	AriVertexColorEditor_ChangeSelect;
}
global proc string AriIntToString(int $int){
	string $string=(" "+$int);
	if($int>=1000)$string=($int);
	if($int<100)$string=(" 0"+$int);
	if($int<10)	$string=(" 00"+$int);
	if($int<0)	$string=($int);
	return $string;
}
global proc AriVertexColorEditor_save(){
	global string $AriVerColorEdEditFileMode;
	global string $AriVerColorEdEditFileSize[2];
	string $fileType=`optionMenu -q -v $AriVerColorEdEditFileMode`;
	string $fileEx;
	if($fileType=="GIF")	$fileEx="gif";
	if($fileType=="SoftImage")	$fileEx="";
	if($fileType=="RLA")	$fileEx="";
	if($fileType=="TIFF")	$fileEx="tiff";
	if($fileType=="SGI")	$fileEx="";
	if($fileType=="Alias")	$fileEx="";
	if($fileType=="IFF")	$fileEx="";
	if($fileType=="JPEG")	$fileEx="jpg";
	if($fileType=="EPS")	$fileEx="";
	int $Xsize=`intField -q -v $AriVerColorEdEditFileSize[0]`;
	int $Ysize=`intField -q -v $AriVerColorEdEditFileSize[1]`;
	string $currentTool=`currentCtx`;
	PaintVertexColorTool;
	string $paintTool=`currentCtx`;
	string $currentFileType=`artAttrPaintVertexCtx -q -exportfiletype $paintTool`;
	int $currentXSize=`artAttrPaintVertexCtx -q -exportfilesizex $paintTool`;
	int $currentYSize=`artAttrPaintVertexCtx -q -exportfilesizey $paintTool`;
	print $currentFileType;
	print "\n";
	print $fileType;
	artAttrPaintVertexCtx -e -exportfiletype $fileType $paintTool;
	artAttrPaintVertexCtx -e -exportfilesizex $Xsize $paintTool;
	artAttrPaintVertexCtx -e -exportfilesizey $Ysize $paintTool;
	string $worksp = `workspace -q -rd`;
	string $filePath[]= `fileDialog2 -dir $worksp`;
	print $filePath;
	print `artAttrPaintVertexCtx -e -exportfilesave ($filePath) $paintTool`;
	artAttrPaintVertexCtx -e -exportfiletype $currentFileType $paintTool;
	artAttrPaintVertexCtx -e -exportfilesizex $currentXSize $paintTool;
	artAttrPaintVertexCtx -e -exportfilesizey $currentYSize $paintTool;
	setToolTo $currentTool;
}
global proc AriVertexColorEditor()
{
	string $ariCommand[];
	string $ariButton[];
	int $i=0;
	global string $AriVerColorEdEscrollLay;
	global string $AriVerColorEdColumnLayout;
	global string $AriVerColorEdColumnPalet;
	global string $AriVerColorEdColorSlider;
	global string $AriVerColorEdAlphaSlider;
	global string $AriVerColorEdColorSliderRand[4];
	global string $AriVerColorEdHSVSlider[];
	global string $AriVerColorEdDirectFloatF;
	global string $AriVerColorEdDirectCheckB;
	global string $AriVerColorEdVectorColorSlider[];
	global string $AriVerColorEdMathTextField;
	global string $AriVerColorEdGradationInput[];
	global string $AriVerColorEdEditFloatF[20];
	global string $AriVerColorEdEditIntMax;
	global string $AriVerColorEdRampColorPort;
	global string $AriVerColorEdRampColorSlider;
	global string $AriVerColorEdRampFieldSlider;
	global string $AriVerColorEdRampColorTextF;
	global string $AriVerColorEdTextScrollList;
	global string $AriVerColorEdUISmoothFloatS;
	global string $AriVerColorEdUI_VerFaceModeRadio[3];
	global string $AriVerColorEdUICheckBoxColorVis;
	global string $AriVerColorEdUICheckBoxBrush;
	global string $AriVerColorEdEditFileMode;
	global string $AriVerColorEdEditFileSize[2];
	int $verFaceModeTrue = true;
	float $addValue[];
	float $scaleValue[];
	float $clampValue[];
	$addValue[0] = 0.1;
	$addValue[1] = 0.1;
	$addValue[2] = 0.1;
	$addValue[3] = 0.1;
	$addValue[4] = 0.1;
	$scaleValue[0] = 1.1;
	$scaleValue[1] = 1.1;
	$scaleValue[2] = 1.1;
	$scaleValue[3] = 1.1;
	$scaleValue[4] = 1.1;
	$clampValue[0] = 0;
	$clampValue[1] = 1;
	if(`optionVar -exists "AriVertexColorEditer_verFaceMode"`)	$verFaceModeTrue = `optionVar -q "AriVertexColorEditer_verFaceMode"`;
	if(`optionVar -exists "AriVertexColorEditer_AddRGB"`)	$addValue[0] = `optionVar -q "AriVertexColorEditer_AddRGB"`;
	if(`optionVar -exists "AriVertexColorEditer_AddR"`)		$addValue[1] = `optionVar -q "AriVertexColorEditer_AddR"`;
	if(`optionVar -exists "AriVertexColorEditer_AddG"`)		$addValue[2] = `optionVar -q "AriVertexColorEditer_AddG"`;
	if(`optionVar -exists "AriVertexColorEditer_AddB"`)		$addValue[3] = `optionVar -q "AriVertexColorEditer_AddB"`;
	if(`optionVar -exists "AriVertexColorEditer_AddA"`)		$addValue[4] = `optionVar -q "AriVertexColorEditer_AddA"`;
	if(`optionVar -exists "AriVertexColorEditer_ScaleRGB"`)	$scaleValue[0] = `optionVar -q "AriVertexColorEditer_ScaleRGB"`;
	if(`optionVar -exists "AriVertexColorEditer_ScaleR"`)	$scaleValue[1] = `optionVar -q "AriVertexColorEditer_ScaleR"`;
	if(`optionVar -exists "AriVertexColorEditer_ScaleG"`)	$scaleValue[2] = `optionVar -q "AriVertexColorEditer_ScaleG"`;
	if(`optionVar -exists "AriVertexColorEditer_ScaleB"`)	$scaleValue[3] = `optionVar -q "AriVertexColorEditer_ScaleB"`;
	if(`optionVar -exists "AriVertexColorEditer_ScaleA"`)	$scaleValue[4] = `optionVar -q "AriVertexColorEditer_ScaleA"`;
	if(`optionVar -exists "AriVertexColorEditer_clampMin"`)	$clampValue[0] = `optionVar -q "AriVertexColorEditer_clampMin"`;
	if(`optionVar -exists "AriVertexColorEditer_clampMax"`)	$clampValue[1] = `optionVar -q "AriVertexColorEditer_clampMax"`;
	if ( (`window -ex AriVertexColorEditorW`) == true ) deleteUI AriVertexColorEditorW;
	window -title "AriVertexColorEditor" -menuBar true -w 300 -h 500   AriVertexColorEditorW;
		string $form=`formLayout`;
		$AriVerColorEdEscrollLay =`scrollLayout`;
			$AriVerColorEdColumnLayout=`columnLayout  -adj true`;
			setParent..;
		setParent..;
		string $verfaceModeColumn = `columnLayout -adj true`;
			rowLayout -nc 2 -ad2 1;
			$AriVerColorEdTextScrollList = `textScrollList -h 60 -ams true -sc "AriVertexColorEditor_ColorSetChange()"`;
			iconTextButton -i "polyColorSetEditor.png" -c "colorSetEditor";
			setParent..;
			rowLayout -nc 3 ;
			button -w 100 -l "ReLoad" -bgc 0.5 1 0.7 -c "AriVertexColorEditor_ChangeSelect()";
			radioCollection;
			$AriVerColorEdUI_VerFaceModeRadio[0] = `radioButton -label "Vertex"      -onc "AriVertexColorEditor_ChangeSelect(); AriVertexColorEditor_Save_UI();" `;
			$AriVerColorEdUI_VerFaceModeRadio[1] = `radioButton -label "VertexFace"  -onc "AriVertexColorEditor_ChangeSelect(); AriVertexColorEditor_Save_UI();" -sl`;
			setParent..;
		setParent..;
		if($verFaceModeTrue==false){
			radioButton -e -sl $AriVerColorEdUI_VerFaceModeRadio[0];
		}
		string $selectButton = `columnLayout`;
			rowLayout -nc 3 -cw3 160 60 50;
			button -w 100 -l ("select" ) -c ("AriVertexColorEditor_Select(0)");
			text -l "Max頂点数";
			$AriVerColorEdEditIntMax=`intField -w 50 -v 2000`;
			setParent..;
		setParent..;
		string $rgba=`frameLayout -l "塗りつぶし/スムース" -cll 1 -cl 0 -w 300 `;
			columnLayout -adj true;
				$AriVerColorEdColorSlider = `colorSliderButtonGrp -bl "RGB" -rgb 0.5 0.5 0.5 -buttonCommand "AriVertexColorEditor_ButtonOn(0)" -cc "ARIReroadInputField(0)"`;
				$AriVerColorEdAlphaSlider = `colorSliderButtonGrp -bl "  A  " -rgb 1 1 1     -buttonCommand "AriVertexColorEditor_ButtonOn(5)" -cc "ARIReroadInputField(1)"`;
				rowLayout -nc 2 -cw2 70 200;
					text -l "RGB 0 - 1.0";
					columnLayout;
						$AriVerColorEdDirectFloatF=`floatFieldGrp -pre 2 -numberOfFields 4 -cw4 50 50 50 50 -value1 1 -v2 0 -v3 0 -v4 1 -cc "ARIReroadInputField(10)"`;
						rowLayout -nc 4 -cw4 50 50 50 50;
							button -h 16 -w 50 -bgc 1 0 0 -l "R" -c "AriVertexColorEditor_ButtonOn(1)";
							button -h 16 -w 50 -bgc 0 1 0 -l "G" -c "AriVertexColorEditor_ButtonOn(2)";
							button -h 16 -w 50 -bgc 0 0 1 -l "B" -c "AriVertexColorEditor_ButtonOn(3)";
							button -h 16 -w 50 -bgc 0 0 0 -l "A" -c "AriVertexColorEditor_ButtonOn(4)";
						setParent..;
					setParent..;
				setParent..;
				button -h 30 -w 280 -label "スムーズ" -c "AriVertexColorEditor_Smooth(0)";
				rowLayout -vis false -nc 2;
				button  -w 140 -label "スムースRGB"   -c "AriVertexColorEditor_Smooth(1)";
				button  -w 140 -label "スムースAlpha" -c "AriVertexColorEditor_Smooth(2)";
				setParent..;
				$AriVerColorEdUISmoothFloatS =  `floatSliderGrp -vis false -max 1 -min 0 -field true -v 1`;
			setParent..;
		setParent..;
		string $edit=`frameLayout -l "加算乗算/クランプ" -cll 1 -cl 0 -w 300 `;
			columnLayout -adj true;
				rowLayout -nc 7;
					text -w 40 -l "RGB" -bgc 1 1 1;
					$AriVerColorEdEditFloatF[0]=`floatField -w 40 -pre 2 -v $addValue[0]`;
					button -w 30 -h 20 -l "+" -c "AriVertexColorEditor_Edit(0,0)";
					button -w 30 -h 20 -l "-" -c "AriVertexColorEditor_Edit(0,1)";
					$AriVerColorEdEditFloatF[10]=`floatField -w 40 -pre 2 -v $scaleValue[0]`;
					button -w 30 -h 20 -l "*" -c "AriVertexColorEditor_Edit(0,2)";
					button -w 30 -h 20 -l "/" -c "AriVertexColorEditor_Edit(0,3)";
				setParent..;
				rowLayout -nc 7 ;
					text -w 40 -l "R" -bgc 1 0 0;
					$AriVerColorEdEditFloatF[1]=`floatField -w 40 -pre 2 -v $addValue[1]`;
					button -w 30 -h 20 -l "+" -c "AriVertexColorEditor_Edit(1,0)";
					button -w 30 -h 20 -l "-" -c "AriVertexColorEditor_Edit(1,1)";
					$AriVerColorEdEditFloatF[11]=`floatField -w 40 -pre 2 -v $scaleValue[1]`;
					button -w 30 -h 20 -l "*" -c "AriVertexColorEditor_Edit(1,2)";
					button -w 30 -h 20 -l "/" -c "AriVertexColorEditor_Edit(1,3)";
				setParent..;
				rowLayout -nc 7;
					text -w 40 -l "G" -bgc 0 1 0;
					$AriVerColorEdEditFloatF[2]=`floatField -w 40 -pre 2 -v $addValue[2]`;
					button -w 30 -h 20 -l "+" -c "AriVertexColorEditor_Edit(2,0)";
					button -w 30 -h 20 -l "-" -c "AriVertexColorEditor_Edit(2,1)";
					$AriVerColorEdEditFloatF[12]=`floatField -w 40 -pre 2 -v $scaleValue[2]`;
					button -w 30 -h 20 -l "*" -c "AriVertexColorEditor_Edit(2,2)";
					button -w 30 -h 20 -l "/" -c "AriVertexColorEditor_Edit(2,3)";
				setParent..;
				rowLayout -nc 7; 
					text -w 40 -l "B" -bgc 0 0 1;
					$AriVerColorEdEditFloatF[3]=`floatField -w 40 -pre 2 -v $addValue[3]`;
					button -w 30 -h 20 -l "+" -c "AriVertexColorEditor_Edit(3,0)";
					button -w 30 -h 20 -l "-" -c "AriVertexColorEditor_Edit(3,1)";
					$AriVerColorEdEditFloatF[13]=`floatField -w 40 -pre 2 -v $scaleValue[3]`;
					button -w 30 -h 20 -l "*" -c "AriVertexColorEditor_Edit(3,2)";
					button -w 30 -h 20 -l "/" -c "AriVertexColorEditor_Edit(3,3)";
				setParent..;
				separator;
				rowLayout -nc 7;
					text -w 40 -l "A" -bgc 0 0 0;
					$AriVerColorEdEditFloatF[4]=`floatField -w 40 -pre 2 -v $addValue[4]`;
					button -w 30 -h 20 -l "+" -c "AriVertexColorEditor_Edit(4,0)";
					button -w 30 -h 20 -l "-" -c "AriVertexColorEditor_Edit(4,1)";
					$AriVerColorEdEditFloatF[14]=`floatField -w 40 -pre 2 -v $scaleValue[4]`;
					button -w 30 -h 20 -l "*" -c "AriVertexColorEditor_Edit(4,2)";
					button -w 30 -h 20 -l "/" -c "AriVertexColorEditor_Edit(4,3)";
				setParent..;
				separator -h 10 -w 280;
				rowLayout -nc 4 -cw4 24 50 24 50;
					text -l "下限";
					$AriVerColorEdEditFloatF[5]=`floatField -w 40 -pre 2 -v $clampValue[0]`;
					text -l "上限";
					$AriVerColorEdEditFloatF[6]=`floatField -w 40 -pre 2 -v $clampValue[1]`;
				setParent..;
				button -w 180 -l "範囲内にクランプRGB" -c "AriVertexColorEditor_Edit(10,0)";
				button -w 180 -l "範囲内にクランプA" -c "AriVertexColorEditor_Edit(11,0)";
			setParent..;
		setParent..;
		string $hsv=`frameLayout -l "HSV" -cll 1 -cl 1 -w 280 -vis false`;
		columnLayout;
			$AriVerColorEdHSVSlider[0]=`floatSliderGrp  -field true -max 180 -min -180 -cc "AriVertexColorEditor_ChangeHSVSlider()"`;
			$AriVerColorEdHSVSlider[1]=`floatSliderGrp  -field true -max 1 -min -1 -precision 2 -cc "AriVertexColorEditor_ChangeHSVSlider()"`;
			$AriVerColorEdHSVSlider[2]=`floatSliderButtonGrp  -field true -max 1 -min -1 -cc "AriVertexColorEditor_ChangeHSVSlider()" -bl "Set" -buttonCommand "AriVertexColorEditor_Select(1)"`;
		setParent..;
		setParent..;
		string $copyPaste = `frameLayout -l "コピー/ペースト" -cll 1 -cl 1 -w 300 -vis false`;
			rowLayout -nc 2;
				button -w 60 -l "Copy"  -c "AriVerColorE_Copy()";
				button -w 60 -l "Paste" -c "AriVerColorE_Paste()";
			setParent..;
		setParent..;
		string $rand=`frameLayout -l "ランダム" -cll 1 -cl 1 -w 300 -vis false `;
			columnLayout;
				$AriVerColorEdColorSliderRand[0] = `colorSliderGrp  -rgb 0.5 0.5 0.5 `;
				$AriVerColorEdColorSliderRand[1] = `colorSliderGrp  -rgb 1 1 1  `;
			setParent..;
			rowLayout -nc 2;
				button -w 60 -l "RGB" -c "AriVerColorE_Rand(0)";
				button -w 60 -l "A"   -c "AriVerColorE_Rand(1)";
			setParent..;
		setParent..;
		string $gradation = `frameLayout -l "Gradation" -cll 1 -cl 1 -w 300 -vis false`;
		columnLayout;
		rowLayout -nc 3 -cw3 40 220 40;
			text -l "ver1";
			$AriVerColorEdGradationInput[0] =`floatFieldGrp -pre 5 -numberOfFields 3 -cw3 70 70 70 -v1 0 -v2 0 -v3 0 `;
			button -l "get" -c "AriVertexColorEditor_GradationVerGet(1)";
		setParent..;
			$AriVerColorEdGradationInput[1]=`colorSliderGrp  -rgb 1 1 1 `;
		rowLayout -nc 3 -cw3 40 220 40;
			text -l "ver2";
			$AriVerColorEdGradationInput[2] =`floatFieldGrp -pre 5 -numberOfFields 3 -cw3 70 70 70 -v1 0 -v2 0 -v3 0 `;
			button -l "get" -c "AriVertexColorEditor_GradationVerGet(2)";
		setParent..;
			$AriVerColorEdGradationInput[3]=`colorSliderGrp  -rgb 1 1 1 `;	
		button -w 200 -l "DistanceGradation" -c "AriVertexColorEditor_GradationGo";
		setParent..;setParent..;
		string $vector =`frameLayout -l "Vector" -cll 1 -cl 1 -w 300 -vis false`;
		columnLayout;
		rowLayout -nc 2 -cw2 200 40;
			$AriVerColorEdVectorColorSlider[5] =`floatFieldGrp -pre 2 -numberOfFields 3 -cw3 50 50 50 -v1 0 -v2 1 -v3 0 `;
			button -l "get" -c "AriVertexColorEditor_VectorGet";
		setParent..;
		$AriVerColorEdRampColorPort = `rampColorPort -h 100 `;
		$AriVerColorEdRampColorSlider = `attrColorSliderGrp -cw 1 0`;
		$AriVerColorEdRampFieldSlider = `attrFieldSliderGrp -cw 1 0`;
		$AriVerColorEdRampColorTextF = `textField -w 200 -text "AriVertexColorEditorRamp" -ed true -enterCommand "AriVertexColorEditor_ConnectRamp"`;
		button -l "Create Ramp" -c "AriVertexColorEditor_CreateRamp()";
		$AriVerColorEdVectorColorSlider[1]=`colorSliderGrp  -rgb 1 1 1 `;
		$AriVerColorEdVectorColorSlider[0]=`colorSliderGrp  -rgb 0 0 0 `;
		$AriVerColorEdVectorColorSlider[3]=`floatSliderGrp  -field true -max 180 -min 0`;
		$AriVerColorEdVectorColorSlider[4]=`floatSliderButtonGrp  -field true -max 180 -min 0 -v 180 -bl "Set" -buttonCommand "AriVertexColorEditor_VectorSet"`;
		setParent..;setParent..;
		string $rireki=`frameLayout -l "履歴" -cll 1 -cl 1 -w 280 `;
		columnLayout;
			AriVertexColorEditor_AddPalet;
		setParent..;setParent..;
		string $exports=`frameLayout -l "出力" -cll 1 -cl 1 -w 280 -vis false`;
		columnLayout;
		rowLayout -nc 3;
		$AriVerColorEdEditFileSize[0]=`intField -w 60 -v 512`;
		$AriVerColorEdEditFileSize[1]=`intField -w 60 -v 512`;
		$AriVerColorEdEditFileMode = `optionMenu -w 120  -label "" `;
				menuItem -label "GIF";
				menuItem -label "SoftImage";
				menuItem -label "RLA";
				menuItem -label "TIFF";
				menuItem -label "SGI";
				menuItem -label "Alias";
				menuItem -label "IFF";
				menuItem -label "JPEG";
				menuItem -label "EPS";
		setParent..;
		button -w 160 -l "書き出し" -c "AriVertexColorEditor_save()";
		setParent..;
		setParent..;
		$verColONOFF=`rowLayout -nc 5 `;
			button -w 100 -label "表示ON"  -c "AriVertexColorEditor_ViewONOFF(1)";
			button -w 100 -label "表示OFF" -c "AriVertexColorEditor_ViewONOFF(0)";
			$AriVerColorEdUICheckBoxColorVis = `checkBox -l "All"`;
			iconTextButton -i "paintVertexColour.png" -c "PaintVertexColorToolOptions";
			$AriVerColorEdUICheckBoxBrush = `checkBox -l "" -vis false`;
		setParent..;
		string $paintFrame = `frameLayout -vis false -l "ペイント" -cll 1 -cl 1 -w 280 `;
		columnLayout;
		button -l "ObjSelect" -c "select `polyListComponentConversion`";
		setParent..;
		setParent..;
		formLayout -edit
		-af $verColONOFF "left"   0
		-af $verColONOFF "bottom" 0
		-af $verColONOFF "right"  0
		-ac $exports "bottom" 0 $verColONOFF
		-af $exports "left"   0
		-af $exports "right"  0
		-ac $paintFrame "bottom" 0 $exports
		-af $paintFrame "left"   0
		-af $paintFrame "right"  0
		-ac $rireki "bottom" 0 $paintFrame
		-af $rireki "left"   0
		-af $rireki "right"  0
		-ac $gradation "bottom" 0 $rireki
		-ac $vector "bottom" 0 $gradation
		-af $vector "right" 0
		-af $vector "left" 0 
		-ac $hsv "bottom" 0 $vector
		-af $hsv "left"   0
		-af $hsv "right"  0
		-ac $rand "bottom" 0 $hsv
		-af $rand "left"   0
		-af $rand "right"  0
		-ac $copyPaste "bottom" 0 $rand
		-af $copyPaste "left"   0
		-af $copyPaste "right"  0
		-ac $edit "bottom" 0 $copyPaste
		-af $edit "left"   0
		-af $edit "right"  0
		-ac $rgba "bottom" 0 $edit
		-af $rgba "left"   0
		-af $rgba "right"  0
		-af $verfaceModeColumn "top" 0
		-af $verfaceModeColumn "left" 0
		-af $verfaceModeColumn "right" 0
		-ac $selectButton "bottom" 0 $rgba
		-ac $AriVerColorEdEscrollLay "bottom" 0 $selectButton
		-ac $AriVerColorEdEscrollLay "top"   0 $verfaceModeColumn
		-af $AriVerColorEdEscrollLay "left"   0
		-af $AriVerColorEdEscrollLay "right"  0
		$form;
	showWindow;
	scriptJob -p "AriVertexColorEditorW" -event "SelectionChanged" "AriVertexColorEditor_ChangeSelect";
	AriVertexColorEditor_ChangeSelect();
}
